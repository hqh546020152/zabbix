#指定运行的用户,权限应该尽量小
user  nginx;

#启动的进程数,通常为CPU的1-2倍
worker_processes  2;

#指定一个nginx进程可以打开的最多文件描述符数目
worker_rlimit_nofile 65535;

#全局错误日志及级别;级别：debug, info, notice, warn, error, crit;其中crit日志最少、debug最多、一般使用error级别
error_log  /var/log/nginx/error.log warn;

#指定主进程id的存储文件位置
pid        /var/run/nginx.pid;

#工作模式及连接数上限定义
events {
    #epoll是多复用IO中的一种方式
    use epoll;
    
    #单个后台worker process进程的最大并发链接数
    worker_connections  65535;
        #并发总数是 worker_processes 和 worker_connections 的乘积;max_clients = worker_processes * worker_connections
        #经验：在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4
}


http {
    #设定mime类型,类型由mime.type文件定义
    include       /etc/nginx/mime.types;
    #默认文件类型
    default_type  application/octet-stream;
    #设定日志格式,vhost里将日志该为此处定义的变量即可
    log_format  mainold  '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  main  '$remote_addr - $remote_user [$time_iso8601] "$request_method $scheme://$host:$server_port$uri" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $request_time $upstream_response_time $request_body';

    log_format  proxy '$remote_addr - $remote_user [$time_iso8601] "$request_method $scheme://$host:$server_port$uri" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $request_time $upstream_response_time $request_body';
        #remote_addr            客户端的ip地址(代理服务器，显示代理服务ip)
        #remote_user            用于记录远程客户端的用户名称（一般为“-”）
        #time_iso8601           用于记录访问时间和时区
        #request_method         变量记录客户端请求的动作，通常为GET或POST
        #scheme                 记录所用的协议，比如http或者是https
        #host                   请求中的主机头(Host)字段，如果请求中的主机头不可用或者空，则为处理请求的server名称(处理请求的server的server_name指令的值)
        #server_port            记录请求到达服务器的端口号
        #uri                    记录请求中的当前URI
        #status                 记录响应状态码，例如：200成功、404页面找不到等；
        #body_bytes_sent        记录给客户端发送的文件主体内容字节数
        #http_referer           记录用户是从哪个链接访问过来的
        #http_user_agent        用户所使用的代理（一般为浏览器），能查阅系统版本、浏览器内核、浏览器版本
        #http_x_forwarded_for   可以记录客户端IP，通过代理服务器来记录客户端的ip地址
        #request_time           指的就是从接受用户请求的第一个字节到发送完响应数据的时间，即包括接收请求数据时间、程序响应时间、输出响应数据时间
        #upstream_response_time 是指从Nginx向后端（php-cgi)建立连接开始到接受完数据然后关闭连接为止的时间，理解为：后端解释器处理的时间
        #request_body           这个变量（0.7.58+）包含请求的主要信息。在使用proxy_pass或fastcgi_pass指令的location中比较有意义

    
    access_log  /var/log/nginx/access.log  main;
    
    #限制上传文件大小,200m最大文件只能为200M
    client_max_body_size 200m;
        #在LNMP环境中,上传文件大小还受PHP配置影响，具体配置文件为/etc/php.ini中的memory_limit、upload_max_filesize、post_max_size参数影响

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    sendfile        on;
    
    #开启目录列表访问，合适下载服务器，默认关闭。
    #autoindex      on;
    
    #防止网络阻塞
    tcp_nopush      on;
    
    #防止网络阻塞
    tcp_nodelay     on;

    # Do not display a nginx version number
    #是否隐藏nginx服务器版本号，on=不隐藏；off=隐藏
    server_tokens   off;


    #长连接超时时间，单位是秒，大文件上传时视情况修改
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #表示 server name 的字符串长度上限值
    server_names_hash_bucket_size  64;

    #gzip模块设置
    #gzip on;
    #gzip_min_length 1k;         #最小压缩文件大小
    #gzip_buffers 4 16k;         #压缩缓冲区
    #gzip_http_version 1.0;      #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    #gzip_comp_level 4;          #压缩等级
    #gzip_types text/plain application/x-javascript text/css application/xml;
    #gzip_vary on;               #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    #limit_zone crawler $binary_remote_addr 10m;

    underscores_in_headers on;
    ignore_invalid_headers on;

    include ./conf.d/*.conf;
}
